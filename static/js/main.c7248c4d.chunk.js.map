{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","isRemoval","onAdd","track","onRemove","name","artist","album","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","fetch","headers","Authorization","then","response","json","jsonResponse","items","console","log","artists","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris","App","playlistName","updatePlaylistName","find","savedTrack","push","filter","currentTrack","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7248c4d.chunk.js","sourcesContent":["\n\nconst clientId = '7990bf1a7d144229859256b3d246e8ad';\nconst redirectUri = \"https://ckatr13.github.io/jammming\";\n\nlet accessToken;\n\nconst Spotify = {\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        } \n\n        // Checks for access Token\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            \n            // Clears the parameters from the URL, so the app doesnâ€™t try grabbing the access token after it has expired\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`,\n        {\n            headers: {Authorization: `Bearer ${accessToken}`}\n        }).then((response) => {\n            return response.json();\n        }).then(jsonResponse => {\n        if (jsonResponse.tracks) {\n            return jsonResponse.tracks.items.map((track) => {\n                console.log(track);\n                return {\n                    id: track.id,\n                    name: track.name,\n                    artist: track.artists[0].name,\n                    album: track.album.name,\n                    uri: track.uri\n                    };\n                });\n                } else {\n                    return [];\n            }\n        })\n    },\n\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n            return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessToken}`\n        }\n        let userId;\n\n        return fetch('https://api.spotify.com/v1/me', {headers: headers}\n        ).then((response) => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({name: name})\n            }).then((response) => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;  \n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackUris})\n                })\n            })\n        })\n    }\n}\n\nexport default Spotify \n","import React from 'react';\nimport './SearchBar.css';\n\nclass SearchBar extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {term: ''}\n\n        this.search = this.search.bind(this);\n        this.handleTermChange = this.handleTermChange.bind(this);\n    }\n\n    search() {\n        this.props.onSearch(this.state.term); \n    }\n\n    handleTermChange(event) {\n        this.setState({term: event.target.value});\n    }\n    \n    render() {\n        return (\n            <div className=\"SearchBar\">\n                <input \n                    placeholder=\"Enter A Song, Album, or Artist\" \n                    onChange={this.handleTermChange}/>\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport './Track.css';\n\nclass Track extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addTrack = this.addTrack.bind(this);\n        this.removeTrack = this.removeTrack.bind(this);\n    }\n    \n    renderAction() {\n        if (this.props.isRemoval) {\n            return (\n                <button className=\"Track-Action\" onClick={this.removeTrack}>-</button>\n            );\n        } else {\n            return (\n                <button className=\"Track-Action\" onClick={this.addTrack}>+</button>\n            );\n        }  \n    }\n\n    addTrack() {\n        this.props.onAdd(this.props.track);\n    }\n\n    removeTrack() {\n        this.props.onRemove(this.props.track);\n    }\n    \n    render() {\n        return (\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        );\n    }\n}\n\nexport default Track;","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\n\nclass TrackList extends React.Component {  \n    render() {\n        return (\n            <div className=\"TrackList\">\n                {this.props.tracks.map(track => {\n                    return <Track \n                    track={track} \n                    key={track.id}\n                    onAdd={this.props.onAdd}\n                    onRemove={this.props.onRemove}\n                    isRemoval={this.props.isRemoval}/>;\n                    })\n                }\n            </div>\n        );\n    }\n}\n\n\nexport default TrackList;","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass SearchResults extends React.Component {\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.searchResults}\n                    onAdd={this.props.onAdd}\n                    isRemoval={false}/> \n            </div>\n        );\n    }\n}\n\nexport default SearchResults;","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\n\nclass Playlist extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleNameChange = this.handleNameChange.bind(this);\n    }\n    \n    handleNameChange(event) { \n        this.props.onNameChange(event.target.value);\n    }    \n\n    render() {\n        return (\n            <div className=\"Playlist\">\n                <input defaultValue={'New Playlist'} onChange={this.handleNameChange}/>\n                    <TrackList \n                        tracks={this.props.playlistTracks}\n                        onRemove={this.props.onRemove}\n                        isRemoval={true}/>\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        );\n    }\n}\n\nexport default Playlist;","import React from 'react';\nimport './App.css';\nimport SearchBar from '../SearchBar/SearchBar';\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from '../Playlist/Playlist';\nimport Spotify from '../../util/Spotify';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: 'playListName',\n      playlistTracks: []\n    }\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  addTrack(track) {\n    let tracks = this.state.playlistTracks;\n    if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } \n      tracks.push(track);\n      this.setState({ playlistTracks: tracks });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n    this.setState({ playlistTracks: tracks });\n    console.log(this.state.playlistTracks)\n  }\n\n  updatePlaylistName(name) {\n    this.setState({playlistName: name});\n  }\n\n  savePlaylist() {\n    const trackUris = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n      this.setState({\n        playlistName: 'New Playlist', \n        playlistTracks: []\n      })\n    })\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({searchResults: searchResults});\n    })\n  }\n  \n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar onSearch={this.search}/>\n          <div className=\"App-playlist\">\n            <SearchResults searchResults={this.state.searchResults}\n              onAdd={this.addTrack}/>\n            <Playlist \n              playlistName={this.state.playlistName} \n              playlistTracks={this.state.playlistTracks}\n              onRemove={this.removeTrack}\n              onNameChange={this.updatePlaylistName}\n              onSave={this.savePlaylist}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}